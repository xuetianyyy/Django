"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加一个模块搜索路径, 该模块包含了所有的应用
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Django自带的秘钥令牌
SECRET_KEY = '$&_p%ise9)wf=$mehhy8fw167!#+d4vcv^^r^kijm)+(yw3gq2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',   # 注册haystack全文检索框架
    'tinymce',  # 富文本编辑器
    'user',    # 用户模块
    'commod',  # 商品模块
    'cart',    # 购物车模块
    'order',   # 订单模块
    'djcelery',  # 导入的djcelery模块(django-celery)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# 设置Mysql数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh',  # 使用的数据库名
        'HOST': 'localhost',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': 'weidong520',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

# 设置中文语言
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
# 设置静态资源目录
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# 设置图片上传保存目录
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/media')

# 指定收集静态资源的路径
STATIC_ROOT = '/home/xuetianyyy/dailyfresh/static'

# # 设置redis存储session信息
# SESSION_ENGINE = 'redis_sessions.session'   # 存储方式
# SESSION_REDIS_HOST = 'localhost'            # 连接地址
# SESSION_REDIS_PORT = 6379                   # 端口号
# SESSION_REDIS_DB = 2                        # 数据库编号
# SESSION_REDIS_PASSWORD = ''                 # 链接密码, 没有留空
# SESSION_REDIS_PREFIX = 'session'            # session键名存储在redis中的前缀

# 2. 在Django的settings.py中添加以下配置
# Django的缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",  # 连接地址和端口号及redis的数据库编号
        "OPTIONS": {
            # 这里指定session的缓存存储在redis中
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": "",     # 连接密码, 没有留空
        }
    }
}

# 3.配置session的存储方式, 如果不设置默认以内存作为缓存
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# 配置富文本编辑器选项
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',  # 设置主题, advanced代表高级
    'width': 800,         # 指定富文本编辑器的宽/px
    'height': 500,        # 指定高度/px
}


# Django用户认证系统
AUTH_USER_MODEL = 'user.User'


# 发送邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'   # 发件服务器, QQ是smtp.qq.com
EMAIL_PORT = 25             # 发件服务器端口, QQ是465
EMAIL_USE_TLS = True  # 是否使用TLS安全传输协议
#发送邮件的邮箱, 填写自己的邮箱账号
EMAIL_HOST_USER = '86308596@qq.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'oqajojxenyjxbjbi'
# 收件人看到的发件人
EMAIL_FROM = 'xuetian<86308596@qq.com>'

# 取消验证用户的激活状态
# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.AllowAllUsersModelBackend']

# 指定未登录用户访问特殊页面时, 跳转的路由
LOGIN_URL = '/user/login'

# 指定自定义文件存储系统所用的类
DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'


# django-celery配置
import djcelery
djcelery.setup_loader()
# Celery使用的中间人(队列)
# 如果有密码: BROKER_URL = 'redis://:password@localhost:6379/3'
BROKER_URL = 'redis://127.0.0.1:6379/3'
CELERYD_CONCURRENCY = 2          # celery worker并发数, 允许最多两个
CELERYD_MAX_TASKS_PER_CHILD = 4  # 每个worker最大执行任务数
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']
# 制定启用的序列化器, 默认这四个


# 添加搜索引擎的配置项
HAYSTACK_CONNECTIONS = {
    'default': {
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}
# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
